type Contact {
  business_phone: String
  email: String
  errors: JSON
  first_name: String
  id: ID
  job_title: String
  last_name: String
}

input ContactInput {
  business_phone: String
  email: String
  first_name: String
  job_title: String
  last_name: String
}

type CurrencyRates {
  base: String
  date: Date
  rates: JSON
}

type Customer {
  contact: Contact
  errors: JSON
  id: ID
  name: String
  notes: String
  webpage: String
}

# An edge in a connection.
type CustomerEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Customer
}

input CustomerFilter {
  elephant: Int
  name_contains: String
  name_starts_with: String
}

input CustomerInput {
  contact: ContactInput
  id: ID
  name: String
  notes: String
  webpage: String
}

# The connection type for Customer.
type CustomerTypeConnection {
  count: Int

  # A list of edges.
  edges: [CustomerEdge]
  nodes: [Customer]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

scalar Date

scalar Decimal

scalar JSON

type Mutation {
  createCustomer(customer: CustomerInput!): Customer
  createProduct(product: ProductInput!): Product
  createSupplier(supplier: SupplierInput!): Supplier
  deleteCustomer(id: ID!): Customer
  deleteProduct(id: ID!): Product
  deleteSupplier(id: ID!): Supplier
  updateCustomer(customer: CustomerInput!): Customer
  updateProduct(product: ProductInput!): Product
  updateSupplier(supplier: SupplierInput!): Supplier
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Product {
  category: String
  discontinued: Boolean
  errors: JSON
  id: ID
  image_url: String
  list_price: Decimal
  minimum_reorder_quantity: Int
  product_code: String
  product_name: String
  reorder_level: Int
  standard_cost: Decimal
  supplier: Supplier
  supplier_id: ID
  target_level: Int
}

# An edge in a connection.
type ProductEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Product
}

input ProductFilter {
  category: String
  product_name_contains: String
  product_name_starts_with: String
  supplier: ID
}

input ProductInput {
  category: String
  id: ID
  image_url: String
  list_price: String
  product_name: String
  supplier: SupplierInput
  supplier_id: ID
}

# The connection type for Product.
type ProductTypeConnection {
  count: Int

  # A list of edges.
  edges: [ProductEdge]
  nodes: [Product]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}

type Query {
  allCustomers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: CustomerFilter
    first: Int = null

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: String = null
    page: Int = null
    perPage: Int = null
  ): CustomerTypeConnection
  allProducts(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: ProductFilter
    first: Int = null

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: String = null
    page: Int = null
    perPage: Int = null
  ): ProductTypeConnection
  allSuppliers(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: SupplierFilter
    first: Int = null

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: String = null
    page: Int = null
    perPage: Int = null
  ): SupplierTypeConnection
  currencyRates(date: Date, base: String = "EUR"): CurrencyRates
  customer(id: ID!): Customer
  product(id: ID!): Product
  supplier(id: ID!): Supplier
}

type Supplier {
  contact: Contact
  errors: JSON
  id: ID
  name: String
  notes: String
  products(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: ProductFilter
    first: Int = null

    # Returns the last _n_ elements from the list.
    last: Int
    orderBy: String = null
    page: Int = null
    perPage: Int = null
  ): ProductTypeConnection
  webpage: String
}

# An edge in a connection.
type SupplierEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: Supplier
}

input SupplierFilter {
  name_contains: String
  name_starts_with: String
}

input SupplierInput {
  contact: ContactInput
  id: ID
  name: String
  notes: String
  webpage: String
}

# The connection type for Supplier.
type SupplierTypeConnection {
  count: Int

  # A list of edges.
  edges: [SupplierEdge]
  nodes: [Supplier]

  # Information to aid in pagination.
  pageInfo: PageInfo!
  totalCount: Int
}